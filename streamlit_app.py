import streamlit as st
import pandas as pd
from PIL import Image
import os
import glob
import re
import pdfplumber

# =====================================
# üîπ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å CSV ‡∏´‡∏£‡∏∑‡∏≠ PDF
# =====================================
def load_data(data_dir="data"):
    """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å CSV ‡∏´‡∏£‡∏∑‡∏≠ PDF ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå data/
    ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô DataFrame ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: name, province, ingredients, description, image_path
    """
    if not os.path.exists(data_dir):
        return pd.DataFrame(columns=["name", "province", "ingredients", "description", "image_path"])

    # ‚úÖ 1. ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠‡πÑ‡∏ü‡∏•‡πå CSV
    csv_files = glob.glob(os.path.join(data_dir, "*.csv"))
    if csv_files:
        try:
            return pd.read_csv(csv_files[0])
        except Exception:
            pass

    # ‚úÖ 2. ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠‡πÑ‡∏ü‡∏•‡πå PDF
    pdf_files = glob.glob(os.path.join(data_dir, "*.pdf"))
    if pdf_files:
        pdf_path = pdf_files[0]
        records = []
        try:
            with pdfplumber.open(pdf_path) as pdf:
                for page in pdf.pages:
                    text = page.extract_text()
                    if not text:
                        continue
                    for line in text.split("\n"):
                        # üî∏ ‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå PDF ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
                        # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: "‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏∏‡πâ‡∏á - ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø - ‡∏Å‡∏∏‡πâ‡∏á ‡∏ï‡∏∞‡πÑ‡∏Ñ‡∏£‡πâ ‡πÉ‡∏ö‡∏°‡∏∞‡∏Å‡∏£‡∏π‡∏î - ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢‡∏£‡∏™‡∏à‡∏±‡∏î‡∏à‡πâ‡∏≤‡∏ô"
                        parts = [p.strip() for p in line.split(" - ")]
                        if len(parts) >= 4:
                            records.append({
                                "name": parts[0],
                                "province": parts[1],
                                "ingredients": parts[2],
                                "description": parts[3],
                                "image_path": ""
                            })
            if records:
                return pd.DataFrame(records)
        except Exception as e:
            st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô PDF ‡πÑ‡∏î‡πâ: {e}")

    # ‚úÖ 3. ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠ index.txt
    index_path = os.path.join(data_dir, "index.txt")
    if os.path.exists(index_path):
        records = []
        with open(index_path, "r", encoding="utf-8") as f:
            for line in f:
                path = line.strip()
                if not path:
                    continue
                filename = os.path.basename(path)
                name_no_ext = os.path.splitext(filename)[0]
                parts = name_no_ext.split("_")
                if len(parts) >= 3 and re.match(r"^\d+", parts[0]):
                    if re.match(r"^\d{8,}$", parts[-1]):
                        name_parts = parts[1:-1]
                    else:
                        name_parts = parts[1:]
                else:
                    name_parts = parts
                name = " ".join(name_parts).replace("-", " ")
                records.append({
                    "name": name,
                    "province": "Unknown",
                    "ingredients": "",
                    "description": "",
                    "image_path": "",
                })
        return pd.DataFrame(records)

    # ‚úÖ 4. ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏•‡∏¢
    return pd.DataFrame(columns=["name", "province", "ingredients", "description", "image_path"])


# =====================================
# üîπ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏≠‡∏õ Streamlit
# =====================================
st.set_page_config(page_title="‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏û‡∏∑‡πâ‡∏ô‡∏ñ‡∏¥‡πà‡∏ô‡πÑ‡∏ó‡∏¢", page_icon="üç≤", layout="wide")
st.title("‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏û‡∏∑‡πâ‡∏ô‡∏ñ‡∏¥‡πà‡∏ô‡πÑ‡∏ó‡∏¢ üç≤")

data = load_data("data")

if data.empty:
    st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå CSV ‡∏´‡∏£‡∏∑‡∏≠ PDF ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå `data/`")
    st.stop()

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå province ‡πÑ‡∏´‡∏°
if "province" not in data.columns:
    data["province"] = "Unknown"

# =====================================
# üîπ ‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î
# =====================================
province = st.selectbox(
    "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î",
    ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + sorted(data["province"].dropna().unique())
)

# =====================================
# üîπ ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
# =====================================
if province != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
    filtered_data = data[data["province"] == province]
else:
    filtered_data = data

# =====================================
# üîπ ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
# =====================================
if filtered_data.empty:
    st.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
else:
    for _, row in filtered_data.iterrows():
        with st.container():
            st.subheader(row.get("name", "‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"))
            st.write(f"üìç ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î: {row.get('province', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')}")
            if row.get("ingredients"):
                st.write(f"ü•ó ‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏™‡∏°: {row.get('ingredients', '')}")
            if row.get("description"):
                st.write(f"üìù {row.get('description', '')}")

            # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            img_path = row.get("image_path", "")
            if isinstance(img_path, str) and os.path.exists(img_path):

                try:
                    image = Image.open(img_path)
                    st.image(image, use_column_width=True)
                except Exception:
                    st.write("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ ‚ùå")

            st.markdown("---")
